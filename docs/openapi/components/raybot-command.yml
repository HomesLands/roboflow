parameters:
  RaybotCommandId:
    name: raybotCommandId
    in: path
    required: true
    schema:
      type: string
      format: uuid

schemas:
  RaybotCommandResponse:
    type: object
    properties:
      id:
        type: string
        format: uuid
      raybotId:
        type: string
        format: uuid
      type:
        $ref: "#/schemas/RaybotCommandType"
      status:
        $ref: "#/schemas/RaybotCommandStatus"
      input:
        type: object
        x-go-type: map[string]interface{}
      output:
        type: object
        x-go-type: map[string]interface{}
      createdAt:
        type: string
        format: date-time
      completedAt:
        type: string
        format: date-time
        nullable: true
    required:
      - id
      - raybotId
      - type
      - input
      - output
      - status
      - createdAt
  PagingRaybotCommandResponse:
    type: object
    properties:
      totalItems:
        type: integer
        format: int64
      items:
        type: array
        items:
          $ref: "#/schemas/RaybotCommandResponse"
    required:
      - totalItems
      - items
  CreateRaybotCommandRequest:
    type: object
    properties:
      type:
        $ref: "#/schemas/RaybotCommandType"
      input:
        type: object
        x-go-type: "json.RawMessage"
        # x-go-type-import:
        #   path: "encoding/json"
    required:
      - type
      - input
  RaybotCommandType:
    type: string
    enum:
      - STOP
      - MOVE_FORWARD
      - MOVE_BACKWARD
      - MOVE_TO_LOCATION
      - OPEN_BOX
      - CLOSE_BOX
      - LIFT_BOX
      - DROP_BOX
      - CHECK_QR
      - WAIT_GET_ITEM
    x-go-type: string
  RaybotCommandStatus:
    type: string
    enum:
      - PENDING
      - IN_PROGRESS
      - SUCCESS
      - FAILURE
    x-go-type: string
