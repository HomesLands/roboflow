// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tuanvumaihuynh/roboflow/internal/model"

	paging "github.com/tuanvumaihuynh/roboflow/pkg/paging"

	uuid "github.com/google/uuid"

	xsort "github.com/tuanvumaihuynh/roboflow/pkg/xsort"
)

// FakeRaybotRepository is an autogenerated mock type for the RaybotRepository type
type FakeRaybotRepository struct {
	mock.Mock
}

type FakeRaybotRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeRaybotRepository) EXPECT() *FakeRaybotRepository_Expecter {
	return &FakeRaybotRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, raybot
func (_m *FakeRaybotRepository) Create(ctx context.Context, raybot model.Raybot) error {
	ret := _m.Called(ctx, raybot)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Raybot) error); ok {
		r0 = rf(ctx, raybot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRaybotRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FakeRaybotRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - raybot model.Raybot
func (_e *FakeRaybotRepository_Expecter) Create(ctx interface{}, raybot interface{}) *FakeRaybotRepository_Create_Call {
	return &FakeRaybotRepository_Create_Call{Call: _e.mock.On("Create", ctx, raybot)}
}

func (_c *FakeRaybotRepository_Create_Call) Run(run func(ctx context.Context, raybot model.Raybot)) *FakeRaybotRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Raybot))
	})
	return _c
}

func (_c *FakeRaybotRepository_Create_Call) Return(_a0 error) *FakeRaybotRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRaybotRepository_Create_Call) RunAndReturn(run func(context.Context, model.Raybot) error) *FakeRaybotRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FakeRaybotRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRaybotRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FakeRaybotRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeRaybotRepository_Expecter) Delete(ctx interface{}, id interface{}) *FakeRaybotRepository_Delete_Call {
	return &FakeRaybotRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *FakeRaybotRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeRaybotRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeRaybotRepository_Delete_Call) Return(_a0 error) *FakeRaybotRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRaybotRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *FakeRaybotRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *FakeRaybotRepository) Get(ctx context.Context, id uuid.UUID) (model.Raybot, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Raybot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Raybot, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Raybot); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Raybot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRaybotRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FakeRaybotRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeRaybotRepository_Expecter) Get(ctx interface{}, id interface{}) *FakeRaybotRepository_Get_Call {
	return &FakeRaybotRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *FakeRaybotRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeRaybotRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeRaybotRepository_Get_Call) Return(_a0 model.Raybot, _a1 error) *FakeRaybotRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRaybotRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Raybot, error)) *FakeRaybotRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields: ctx, id
func (_m *FakeRaybotRepository) GetState(ctx context.Context, id uuid.UUID) (model.RaybotStatus, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 model.RaybotStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.RaybotStatus, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.RaybotStatus); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.RaybotStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRaybotRepository_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type FakeRaybotRepository_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeRaybotRepository_Expecter) GetState(ctx interface{}, id interface{}) *FakeRaybotRepository_GetState_Call {
	return &FakeRaybotRepository_GetState_Call{Call: _e.mock.On("GetState", ctx, id)}
}

func (_c *FakeRaybotRepository_GetState_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeRaybotRepository_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeRaybotRepository_GetState_Call) Return(_a0 model.RaybotStatus, _a1 error) *FakeRaybotRepository_GetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRaybotRepository_GetState_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.RaybotStatus, error)) *FakeRaybotRepository_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, p, sorts, state
func (_m *FakeRaybotRepository) List(ctx context.Context, p paging.Params, sorts []xsort.Sort, state *model.RaybotStatus) (*paging.List[model.Raybot], error) {
	ret := _m.Called(ctx, p, sorts, state)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *paging.List[model.Raybot]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paging.Params, []xsort.Sort, *model.RaybotStatus) (*paging.List[model.Raybot], error)); ok {
		return rf(ctx, p, sorts, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paging.Params, []xsort.Sort, *model.RaybotStatus) *paging.List[model.Raybot]); ok {
		r0 = rf(ctx, p, sorts, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paging.List[model.Raybot])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paging.Params, []xsort.Sort, *model.RaybotStatus) error); ok {
		r1 = rf(ctx, p, sorts, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRaybotRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FakeRaybotRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - p paging.Params
//   - sorts []xsort.Sort
//   - state *model.RaybotStatus
func (_e *FakeRaybotRepository_Expecter) List(ctx interface{}, p interface{}, sorts interface{}, state interface{}) *FakeRaybotRepository_List_Call {
	return &FakeRaybotRepository_List_Call{Call: _e.mock.On("List", ctx, p, sorts, state)}
}

func (_c *FakeRaybotRepository_List_Call) Run(run func(ctx context.Context, p paging.Params, sorts []xsort.Sort, state *model.RaybotStatus)) *FakeRaybotRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(paging.Params), args[2].([]xsort.Sort), args[3].(*model.RaybotStatus))
	})
	return _c
}

func (_c *FakeRaybotRepository_List_Call) Return(_a0 *paging.List[model.Raybot], _a1 error) *FakeRaybotRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRaybotRepository_List_Call) RunAndReturn(run func(context.Context, paging.Params, []xsort.Sort, *model.RaybotStatus) (*paging.List[model.Raybot], error)) *FakeRaybotRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, raybot
func (_m *FakeRaybotRepository) Update(ctx context.Context, raybot model.Raybot) (model.Raybot, error) {
	ret := _m.Called(ctx, raybot)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Raybot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Raybot) (model.Raybot, error)); ok {
		return rf(ctx, raybot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Raybot) model.Raybot); ok {
		r0 = rf(ctx, raybot)
	} else {
		r0 = ret.Get(0).(model.Raybot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Raybot) error); ok {
		r1 = rf(ctx, raybot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRaybotRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type FakeRaybotRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - raybot model.Raybot
func (_e *FakeRaybotRepository_Expecter) Update(ctx interface{}, raybot interface{}) *FakeRaybotRepository_Update_Call {
	return &FakeRaybotRepository_Update_Call{Call: _e.mock.On("Update", ctx, raybot)}
}

func (_c *FakeRaybotRepository_Update_Call) Run(run func(ctx context.Context, raybot model.Raybot)) *FakeRaybotRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Raybot))
	})
	return _c
}

func (_c *FakeRaybotRepository_Update_Call) Return(_a0 model.Raybot, _a1 error) *FakeRaybotRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRaybotRepository_Update_Call) RunAndReturn(run func(context.Context, model.Raybot) (model.Raybot, error)) *FakeRaybotRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateState provides a mock function with given fields: ctx, id, status
func (_m *FakeRaybotRepository) UpdateState(ctx context.Context, id uuid.UUID, status model.RaybotStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RaybotStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRaybotRepository_UpdateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateState'
type FakeRaybotRepository_UpdateState_Call struct {
	*mock.Call
}

// UpdateState is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - status model.RaybotStatus
func (_e *FakeRaybotRepository_Expecter) UpdateState(ctx interface{}, id interface{}, status interface{}) *FakeRaybotRepository_UpdateState_Call {
	return &FakeRaybotRepository_UpdateState_Call{Call: _e.mock.On("UpdateState", ctx, id, status)}
}

func (_c *FakeRaybotRepository_UpdateState_Call) Run(run func(ctx context.Context, id uuid.UUID, status model.RaybotStatus)) *FakeRaybotRepository_UpdateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(model.RaybotStatus))
	})
	return _c
}

func (_c *FakeRaybotRepository_UpdateState_Call) Return(_a0 error) *FakeRaybotRepository_UpdateState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRaybotRepository_UpdateState_Call) RunAndReturn(run func(context.Context, uuid.UUID, model.RaybotStatus) error) *FakeRaybotRepository_UpdateState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeRaybotRepository creates a new instance of FakeRaybotRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeRaybotRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeRaybotRepository {
	mock := &FakeRaybotRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
