// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tuanvumaihuynh/roboflow/internal/model"

	paging "github.com/tuanvumaihuynh/roboflow/pkg/paging"

	uuid "github.com/google/uuid"

	xsort "github.com/tuanvumaihuynh/roboflow/pkg/xsort"
)

// FakeQRLocationRepository is an autogenerated mock type for the QRLocationRepository type
type FakeQRLocationRepository struct {
	mock.Mock
}

type FakeQRLocationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeQRLocationRepository) EXPECT() *FakeQRLocationRepository_Expecter {
	return &FakeQRLocationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, loc
func (_m *FakeQRLocationRepository) Create(ctx context.Context, loc model.QRLocation) error {
	ret := _m.Called(ctx, loc)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.QRLocation) error); ok {
		r0 = rf(ctx, loc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeQRLocationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FakeQRLocationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - loc model.QRLocation
func (_e *FakeQRLocationRepository_Expecter) Create(ctx interface{}, loc interface{}) *FakeQRLocationRepository_Create_Call {
	return &FakeQRLocationRepository_Create_Call{Call: _e.mock.On("Create", ctx, loc)}
}

func (_c *FakeQRLocationRepository_Create_Call) Run(run func(ctx context.Context, loc model.QRLocation)) *FakeQRLocationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.QRLocation))
	})
	return _c
}

func (_c *FakeQRLocationRepository_Create_Call) Return(_a0 error) *FakeQRLocationRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeQRLocationRepository_Create_Call) RunAndReturn(run func(context.Context, model.QRLocation) error) *FakeQRLocationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FakeQRLocationRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeQRLocationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FakeQRLocationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeQRLocationRepository_Expecter) Delete(ctx interface{}, id interface{}) *FakeQRLocationRepository_Delete_Call {
	return &FakeQRLocationRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *FakeQRLocationRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeQRLocationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeQRLocationRepository_Delete_Call) Return(_a0 error) *FakeQRLocationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeQRLocationRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *FakeQRLocationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExistByQRCode provides a mock function with given fields: ctx, qrCode
func (_m *FakeQRLocationRepository) ExistByQRCode(ctx context.Context, qrCode string) (bool, error) {
	ret := _m.Called(ctx, qrCode)

	if len(ret) == 0 {
		panic("no return value specified for ExistByQRCode")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, qrCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, qrCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, qrCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeQRLocationRepository_ExistByQRCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistByQRCode'
type FakeQRLocationRepository_ExistByQRCode_Call struct {
	*mock.Call
}

// ExistByQRCode is a helper method to define mock.On call
//   - ctx context.Context
//   - qrCode string
func (_e *FakeQRLocationRepository_Expecter) ExistByQRCode(ctx interface{}, qrCode interface{}) *FakeQRLocationRepository_ExistByQRCode_Call {
	return &FakeQRLocationRepository_ExistByQRCode_Call{Call: _e.mock.On("ExistByQRCode", ctx, qrCode)}
}

func (_c *FakeQRLocationRepository_ExistByQRCode_Call) Run(run func(ctx context.Context, qrCode string)) *FakeQRLocationRepository_ExistByQRCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FakeQRLocationRepository_ExistByQRCode_Call) Return(_a0 bool, _a1 error) *FakeQRLocationRepository_ExistByQRCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeQRLocationRepository_ExistByQRCode_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *FakeQRLocationRepository_ExistByQRCode_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *FakeQRLocationRepository) Get(ctx context.Context, id uuid.UUID) (model.QRLocation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.QRLocation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.QRLocation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.QRLocation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.QRLocation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeQRLocationRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FakeQRLocationRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeQRLocationRepository_Expecter) Get(ctx interface{}, id interface{}) *FakeQRLocationRepository_Get_Call {
	return &FakeQRLocationRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *FakeQRLocationRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeQRLocationRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeQRLocationRepository_Get_Call) Return(_a0 model.QRLocation, _a1 error) *FakeQRLocationRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeQRLocationRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.QRLocation, error)) *FakeQRLocationRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, p, sorts
func (_m *FakeQRLocationRepository) List(ctx context.Context, p paging.Params, sorts []xsort.Sort) (*paging.List[model.QRLocation], error) {
	ret := _m.Called(ctx, p, sorts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *paging.List[model.QRLocation]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paging.Params, []xsort.Sort) (*paging.List[model.QRLocation], error)); ok {
		return rf(ctx, p, sorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paging.Params, []xsort.Sort) *paging.List[model.QRLocation]); ok {
		r0 = rf(ctx, p, sorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paging.List[model.QRLocation])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paging.Params, []xsort.Sort) error); ok {
		r1 = rf(ctx, p, sorts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeQRLocationRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FakeQRLocationRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - p paging.Params
//   - sorts []xsort.Sort
func (_e *FakeQRLocationRepository_Expecter) List(ctx interface{}, p interface{}, sorts interface{}) *FakeQRLocationRepository_List_Call {
	return &FakeQRLocationRepository_List_Call{Call: _e.mock.On("List", ctx, p, sorts)}
}

func (_c *FakeQRLocationRepository_List_Call) Run(run func(ctx context.Context, p paging.Params, sorts []xsort.Sort)) *FakeQRLocationRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(paging.Params), args[2].([]xsort.Sort))
	})
	return _c
}

func (_c *FakeQRLocationRepository_List_Call) Return(_a0 *paging.List[model.QRLocation], _a1 error) *FakeQRLocationRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeQRLocationRepository_List_Call) RunAndReturn(run func(context.Context, paging.Params, []xsort.Sort) (*paging.List[model.QRLocation], error)) *FakeQRLocationRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, loc
func (_m *FakeQRLocationRepository) Update(ctx context.Context, loc model.QRLocation) (model.QRLocation, error) {
	ret := _m.Called(ctx, loc)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.QRLocation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.QRLocation) (model.QRLocation, error)); ok {
		return rf(ctx, loc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.QRLocation) model.QRLocation); ok {
		r0 = rf(ctx, loc)
	} else {
		r0 = ret.Get(0).(model.QRLocation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.QRLocation) error); ok {
		r1 = rf(ctx, loc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeQRLocationRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type FakeQRLocationRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - loc model.QRLocation
func (_e *FakeQRLocationRepository_Expecter) Update(ctx interface{}, loc interface{}) *FakeQRLocationRepository_Update_Call {
	return &FakeQRLocationRepository_Update_Call{Call: _e.mock.On("Update", ctx, loc)}
}

func (_c *FakeQRLocationRepository_Update_Call) Run(run func(ctx context.Context, loc model.QRLocation)) *FakeQRLocationRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.QRLocation))
	})
	return _c
}

func (_c *FakeQRLocationRepository_Update_Call) Return(_a0 model.QRLocation, _a1 error) *FakeQRLocationRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeQRLocationRepository_Update_Call) RunAndReturn(run func(context.Context, model.QRLocation) (model.QRLocation, error)) *FakeQRLocationRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeQRLocationRepository creates a new instance of FakeQRLocationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeQRLocationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeQRLocationRepository {
	mock := &FakeQRLocationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
