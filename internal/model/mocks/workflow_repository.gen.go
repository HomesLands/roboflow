// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tuanvumaihuynh/roboflow/internal/model"

	paging "github.com/tuanvumaihuynh/roboflow/pkg/paging"

	uuid "github.com/google/uuid"

	xsort "github.com/tuanvumaihuynh/roboflow/pkg/xsort"
)

// FakeWorkflowRepository is an autogenerated mock type for the WorkflowRepository type
type FakeWorkflowRepository struct {
	mock.Mock
}

type FakeWorkflowRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeWorkflowRepository) EXPECT() *FakeWorkflowRepository_Expecter {
	return &FakeWorkflowRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, workflow
func (_m *FakeWorkflowRepository) Create(ctx context.Context, workflow model.Workflow) error {
	ret := _m.Called(ctx, workflow)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Workflow) error); ok {
		r0 = rf(ctx, workflow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeWorkflowRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FakeWorkflowRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - workflow model.Workflow
func (_e *FakeWorkflowRepository_Expecter) Create(ctx interface{}, workflow interface{}) *FakeWorkflowRepository_Create_Call {
	return &FakeWorkflowRepository_Create_Call{Call: _e.mock.On("Create", ctx, workflow)}
}

func (_c *FakeWorkflowRepository_Create_Call) Run(run func(ctx context.Context, workflow model.Workflow)) *FakeWorkflowRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Workflow))
	})
	return _c
}

func (_c *FakeWorkflowRepository_Create_Call) Return(_a0 error) *FakeWorkflowRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeWorkflowRepository_Create_Call) RunAndReturn(run func(context.Context, model.Workflow) error) *FakeWorkflowRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FakeWorkflowRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeWorkflowRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FakeWorkflowRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeWorkflowRepository_Expecter) Delete(ctx interface{}, id interface{}) *FakeWorkflowRepository_Delete_Call {
	return &FakeWorkflowRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *FakeWorkflowRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeWorkflowRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeWorkflowRepository_Delete_Call) Return(_a0 error) *FakeWorkflowRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeWorkflowRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *FakeWorkflowRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *FakeWorkflowRepository) Get(ctx context.Context, id uuid.UUID) (model.Workflow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Workflow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Workflow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Workflow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeWorkflowRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FakeWorkflowRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeWorkflowRepository_Expecter) Get(ctx interface{}, id interface{}) *FakeWorkflowRepository_Get_Call {
	return &FakeWorkflowRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *FakeWorkflowRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeWorkflowRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeWorkflowRepository_Get_Call) Return(_a0 model.Workflow, _a1 error) *FakeWorkflowRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeWorkflowRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Workflow, error)) *FakeWorkflowRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, p, sorts
func (_m *FakeWorkflowRepository) List(ctx context.Context, p paging.Params, sorts []xsort.Sort) (*paging.List[model.Workflow], error) {
	ret := _m.Called(ctx, p, sorts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *paging.List[model.Workflow]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paging.Params, []xsort.Sort) (*paging.List[model.Workflow], error)); ok {
		return rf(ctx, p, sorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paging.Params, []xsort.Sort) *paging.List[model.Workflow]); ok {
		r0 = rf(ctx, p, sorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paging.List[model.Workflow])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paging.Params, []xsort.Sort) error); ok {
		r1 = rf(ctx, p, sorts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeWorkflowRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FakeWorkflowRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - p paging.Params
//   - sorts []xsort.Sort
func (_e *FakeWorkflowRepository_Expecter) List(ctx interface{}, p interface{}, sorts interface{}) *FakeWorkflowRepository_List_Call {
	return &FakeWorkflowRepository_List_Call{Call: _e.mock.On("List", ctx, p, sorts)}
}

func (_c *FakeWorkflowRepository_List_Call) Run(run func(ctx context.Context, p paging.Params, sorts []xsort.Sort)) *FakeWorkflowRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(paging.Params), args[2].([]xsort.Sort))
	})
	return _c
}

func (_c *FakeWorkflowRepository_List_Call) Return(_a0 *paging.List[model.Workflow], _a1 error) *FakeWorkflowRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeWorkflowRepository_List_Call) RunAndReturn(run func(context.Context, paging.Params, []xsort.Sort) (*paging.List[model.Workflow], error)) *FakeWorkflowRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, workflow
func (_m *FakeWorkflowRepository) Update(ctx context.Context, workflow model.Workflow) (model.Workflow, error) {
	ret := _m.Called(ctx, workflow)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Workflow) (model.Workflow, error)); ok {
		return rf(ctx, workflow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Workflow) model.Workflow); ok {
		r0 = rf(ctx, workflow)
	} else {
		r0 = ret.Get(0).(model.Workflow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Workflow) error); ok {
		r1 = rf(ctx, workflow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeWorkflowRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type FakeWorkflowRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - workflow model.Workflow
func (_e *FakeWorkflowRepository_Expecter) Update(ctx interface{}, workflow interface{}) *FakeWorkflowRepository_Update_Call {
	return &FakeWorkflowRepository_Update_Call{Call: _e.mock.On("Update", ctx, workflow)}
}

func (_c *FakeWorkflowRepository_Update_Call) Run(run func(ctx context.Context, workflow model.Workflow)) *FakeWorkflowRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Workflow))
	})
	return _c
}

func (_c *FakeWorkflowRepository_Update_Call) Return(_a0 model.Workflow, _a1 error) *FakeWorkflowRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeWorkflowRepository_Update_Call) RunAndReturn(run func(context.Context, model.Workflow) (model.Workflow, error)) *FakeWorkflowRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeWorkflowRepository creates a new instance of FakeWorkflowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeWorkflowRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeWorkflowRepository {
	mock := &FakeWorkflowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
