// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tuanvumaihuynh/roboflow/internal/model"

	uuid "github.com/google/uuid"

	xsort "github.com/tuanvumaihuynh/roboflow/pkg/xsort"
)

// FakeStepRepository is an autogenerated mock type for the StepRepository type
type FakeStepRepository struct {
	mock.Mock
}

type FakeStepRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeStepRepository) EXPECT() *FakeStepRepository_Expecter {
	return &FakeStepRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *FakeStepRepository) Get(ctx context.Context, id uuid.UUID) (model.Step, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Step
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Step, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Step); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Step)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeStepRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FakeStepRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeStepRepository_Expecter) Get(ctx interface{}, id interface{}) *FakeStepRepository_Get_Call {
	return &FakeStepRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *FakeStepRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeStepRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeStepRepository_Get_Call) Return(_a0 model.Step, _a1 error) *FakeStepRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeStepRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Step, error)) *FakeStepRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, workflowExecutionID, sorts
func (_m *FakeStepRepository) List(ctx context.Context, workflowExecutionID uuid.UUID, sorts []xsort.Sort) ([]model.Step, error) {
	ret := _m.Called(ctx, workflowExecutionID, sorts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Step
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []xsort.Sort) ([]model.Step, error)); ok {
		return rf(ctx, workflowExecutionID, sorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []xsort.Sort) []model.Step); ok {
		r0 = rf(ctx, workflowExecutionID, sorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Step)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []xsort.Sort) error); ok {
		r1 = rf(ctx, workflowExecutionID, sorts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeStepRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FakeStepRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowExecutionID uuid.UUID
//   - sorts []xsort.Sort
func (_e *FakeStepRepository_Expecter) List(ctx interface{}, workflowExecutionID interface{}, sorts interface{}) *FakeStepRepository_List_Call {
	return &FakeStepRepository_List_Call{Call: _e.mock.On("List", ctx, workflowExecutionID, sorts)}
}

func (_c *FakeStepRepository_List_Call) Run(run func(ctx context.Context, workflowExecutionID uuid.UUID, sorts []xsort.Sort)) *FakeStepRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]xsort.Sort))
	})
	return _c
}

func (_c *FakeStepRepository_List_Call) Return(_a0 []model.Step, _a1 error) *FakeStepRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeStepRepository_List_Call) RunAndReturn(run func(context.Context, uuid.UUID, []xsort.Sort) ([]model.Step, error)) *FakeStepRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeStepRepository creates a new instance of FakeStepRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeStepRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeStepRepository {
	mock := &FakeStepRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
