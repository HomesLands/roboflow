// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tuanvumaihuynh/roboflow/internal/model"

	paging "github.com/tuanvumaihuynh/roboflow/pkg/paging"

	uuid "github.com/google/uuid"

	xsort "github.com/tuanvumaihuynh/roboflow/pkg/xsort"
)

// FakeRaybotCommandRepository is an autogenerated mock type for the RaybotCommandRepository type
type FakeRaybotCommandRepository struct {
	mock.Mock
}

type FakeRaybotCommandRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeRaybotCommandRepository) EXPECT() *FakeRaybotCommandRepository_Expecter {
	return &FakeRaybotCommandRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, cmd
func (_m *FakeRaybotCommandRepository) Create(ctx context.Context, cmd model.RaybotCommand) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RaybotCommand) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRaybotCommandRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FakeRaybotCommandRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd model.RaybotCommand
func (_e *FakeRaybotCommandRepository_Expecter) Create(ctx interface{}, cmd interface{}) *FakeRaybotCommandRepository_Create_Call {
	return &FakeRaybotCommandRepository_Create_Call{Call: _e.mock.On("Create", ctx, cmd)}
}

func (_c *FakeRaybotCommandRepository_Create_Call) Run(run func(ctx context.Context, cmd model.RaybotCommand)) *FakeRaybotCommandRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RaybotCommand))
	})
	return _c
}

func (_c *FakeRaybotCommandRepository_Create_Call) Return(_a0 error) *FakeRaybotCommandRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRaybotCommandRepository_Create_Call) RunAndReturn(run func(context.Context, model.RaybotCommand) error) *FakeRaybotCommandRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FakeRaybotCommandRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRaybotCommandRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FakeRaybotCommandRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeRaybotCommandRepository_Expecter) Delete(ctx interface{}, id interface{}) *FakeRaybotCommandRepository_Delete_Call {
	return &FakeRaybotCommandRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *FakeRaybotCommandRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeRaybotCommandRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeRaybotCommandRepository_Delete_Call) Return(_a0 error) *FakeRaybotCommandRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRaybotCommandRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *FakeRaybotCommandRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *FakeRaybotCommandRepository) Get(ctx context.Context, id uuid.UUID) (model.RaybotCommand, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.RaybotCommand
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.RaybotCommand, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.RaybotCommand); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.RaybotCommand)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRaybotCommandRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FakeRaybotCommandRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FakeRaybotCommandRepository_Expecter) Get(ctx interface{}, id interface{}) *FakeRaybotCommandRepository_Get_Call {
	return &FakeRaybotCommandRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *FakeRaybotCommandRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FakeRaybotCommandRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FakeRaybotCommandRepository_Get_Call) Return(_a0 model.RaybotCommand, _a1 error) *FakeRaybotCommandRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRaybotCommandRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.RaybotCommand, error)) *FakeRaybotCommandRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, raybotId, p, sorts
func (_m *FakeRaybotCommandRepository) List(ctx context.Context, raybotId uuid.UUID, p paging.Params, sorts []xsort.Sort) (*paging.List[model.RaybotCommand], error) {
	ret := _m.Called(ctx, raybotId, p, sorts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *paging.List[model.RaybotCommand]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, paging.Params, []xsort.Sort) (*paging.List[model.RaybotCommand], error)); ok {
		return rf(ctx, raybotId, p, sorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, paging.Params, []xsort.Sort) *paging.List[model.RaybotCommand]); ok {
		r0 = rf(ctx, raybotId, p, sorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paging.List[model.RaybotCommand])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, paging.Params, []xsort.Sort) error); ok {
		r1 = rf(ctx, raybotId, p, sorts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRaybotCommandRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FakeRaybotCommandRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - raybotId uuid.UUID
//   - p paging.Params
//   - sorts []xsort.Sort
func (_e *FakeRaybotCommandRepository_Expecter) List(ctx interface{}, raybotId interface{}, p interface{}, sorts interface{}) *FakeRaybotCommandRepository_List_Call {
	return &FakeRaybotCommandRepository_List_Call{Call: _e.mock.On("List", ctx, raybotId, p, sorts)}
}

func (_c *FakeRaybotCommandRepository_List_Call) Run(run func(ctx context.Context, raybotId uuid.UUID, p paging.Params, sorts []xsort.Sort)) *FakeRaybotCommandRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(paging.Params), args[3].([]xsort.Sort))
	})
	return _c
}

func (_c *FakeRaybotCommandRepository_List_Call) Return(_a0 *paging.List[model.RaybotCommand], _a1 error) *FakeRaybotCommandRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRaybotCommandRepository_List_Call) RunAndReturn(run func(context.Context, uuid.UUID, paging.Params, []xsort.Sort) (*paging.List[model.RaybotCommand], error)) *FakeRaybotCommandRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, cmdID, raybotStatus, fn
func (_m *FakeRaybotCommandRepository) Update(ctx context.Context, cmdID uuid.UUID, raybotStatus model.RaybotStatus, fn func(*model.RaybotCommand) error) error {
	ret := _m.Called(ctx, cmdID, raybotStatus, fn)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RaybotStatus, func(*model.RaybotCommand) error) error); ok {
		r0 = rf(ctx, cmdID, raybotStatus, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRaybotCommandRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type FakeRaybotCommandRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - cmdID uuid.UUID
//   - raybotStatus model.RaybotStatus
//   - fn func(*model.RaybotCommand) error
func (_e *FakeRaybotCommandRepository_Expecter) Update(ctx interface{}, cmdID interface{}, raybotStatus interface{}, fn interface{}) *FakeRaybotCommandRepository_Update_Call {
	return &FakeRaybotCommandRepository_Update_Call{Call: _e.mock.On("Update", ctx, cmdID, raybotStatus, fn)}
}

func (_c *FakeRaybotCommandRepository_Update_Call) Run(run func(ctx context.Context, cmdID uuid.UUID, raybotStatus model.RaybotStatus, fn func(*model.RaybotCommand) error)) *FakeRaybotCommandRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(model.RaybotStatus), args[3].(func(*model.RaybotCommand) error))
	})
	return _c
}

func (_c *FakeRaybotCommandRepository_Update_Call) Return(_a0 error) *FakeRaybotCommandRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRaybotCommandRepository_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, model.RaybotStatus, func(*model.RaybotCommand) error) error) *FakeRaybotCommandRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeRaybotCommandRepository creates a new instance of FakeRaybotCommandRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeRaybotCommandRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeRaybotCommandRepository {
	mock := &FakeRaybotCommandRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
