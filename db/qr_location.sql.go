// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: qr_location.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createQRLocation = `-- name: CreateQRLocation :exec
INSERT INTO qr_locations (
    id,
    name,
    qr_code,
	metadata,
    created_at,
    updated_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
	$6
)
`

type CreateQRLocationParams struct {
	ID        uuid.UUID
	Name      string
	QrCode    string
	Metadata  map[string]interface{}
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateQRLocation(ctx context.Context, arg CreateQRLocationParams) error {
	_, err := q.db.Exec(ctx, createQRLocation,
		arg.ID,
		arg.Name,
		arg.QrCode,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteQRLocation = `-- name: DeleteQRLocation :exec
DELETE FROM qr_locations
WHERE id = $1
`

func (q *Queries) DeleteQRLocation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteQRLocation, id)
	return err
}

const existsQRLocationByQRCode = `-- name: ExistsQRLocationByQRCode :one
SELECT EXISTS(
	SELECT 1
	FROM qr_locations
	WHERE qr_code = $1
)
`

func (q *Queries) ExistsQRLocationByQRCode(ctx context.Context, qrCode string) (bool, error) {
	row := q.db.QueryRow(ctx, existsQRLocationByQRCode, qrCode)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getQRLocation = `-- name: GetQRLocation :one
SELECT id, name, qr_code, metadata, created_at, updated_at FROM qr_locations
WHERE id = $1
`

func (q *Queries) GetQRLocation(ctx context.Context, id uuid.UUID) (*QrLocation, error) {
	row := q.db.QueryRow(ctx, getQRLocation, id)
	var i QrLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.QrCode,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateQRLocation = `-- name: UpdateQRLocation :one
UPDATE qr_locations
SET name = $1,
    qr_code = $2,
	metadata = $3,
    updated_at = $4
WHERE id = $5
RETURNING id, name, qr_code, metadata, created_at, updated_at
`

type UpdateQRLocationParams struct {
	Name      string
	QrCode    string
	Metadata  map[string]interface{}
	UpdatedAt pgtype.Timestamptz
	ID        uuid.UUID
}

func (q *Queries) UpdateQRLocation(ctx context.Context, arg UpdateQRLocationParams) (*QrLocation, error) {
	row := q.db.QueryRow(ctx, updateQRLocation,
		arg.Name,
		arg.QrCode,
		arg.Metadata,
		arg.UpdatedAt,
		arg.ID,
	)
	var i QrLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.QrCode,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
