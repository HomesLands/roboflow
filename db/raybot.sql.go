// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: raybot.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRaybot = `-- name: CreateRaybot :exec
INSERT INTO raybots (
    id,
    name,
    token,
    status,
    created_at,
    updated_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateRaybotParams struct {
	ID        uuid.UUID
	Name      string
	Token     string
	Status    string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateRaybot(ctx context.Context, arg CreateRaybotParams) error {
	_, err := q.db.Exec(ctx, createRaybot,
		arg.ID,
		arg.Name,
		arg.Token,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteRaybot = `-- name: DeleteRaybot :exec
DELETE FROM raybots
WHERE id = $1
`

func (q *Queries) DeleteRaybot(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRaybot, id)
	return err
}

const getRaybot = `-- name: GetRaybot :one
SELECT id, name, token, status, ip_address, last_connected_at, created_at, updated_at FROM raybots
WHERE id = $1
`

func (q *Queries) GetRaybot(ctx context.Context, id uuid.UUID) (*Raybot, error) {
	row := q.db.QueryRow(ctx, getRaybot, id)
	var i Raybot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.Status,
		&i.IpAddress,
		&i.LastConnectedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getRaybotStatus = `-- name: GetRaybotStatus :one
SELECT status FROM raybots
WHERE id = $1
`

func (q *Queries) GetRaybotStatus(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getRaybotStatus, id)
	var status string
	err := row.Scan(&status)
	return status, err
}

const listRaybots = `-- name: ListRaybots :many
SELECT id, name, token, status, ip_address, last_connected_at, created_at, updated_at FROM raybots
ORDER BY created_at DESC
`

func (q *Queries) ListRaybots(ctx context.Context) ([]*Raybot, error) {
	rows, err := q.db.Query(ctx, listRaybots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Raybot{}
	for rows.Next() {
		var i Raybot
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Token,
			&i.Status,
			&i.IpAddress,
			&i.LastConnectedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRaybot = `-- name: UpdateRaybot :one
UPDATE raybots
SET name = $1,
    token = $2,
    status = $3,
    ip_address = $4,
    last_connected_at = $5,
    updated_at = $6
WHERE id = $7
RETURNING id, name, token, status, ip_address, last_connected_at, created_at, updated_at
`

type UpdateRaybotParams struct {
	Name            string
	Token           string
	Status          string
	IpAddress       *string
	LastConnectedAt pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
	ID              uuid.UUID
}

func (q *Queries) UpdateRaybot(ctx context.Context, arg UpdateRaybotParams) (*Raybot, error) {
	row := q.db.QueryRow(ctx, updateRaybot,
		arg.Name,
		arg.Token,
		arg.Status,
		arg.IpAddress,
		arg.LastConnectedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Raybot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.Status,
		&i.IpAddress,
		&i.LastConnectedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateRaybotStatus = `-- name: UpdateRaybotStatus :exec
UPDATE raybots
SET status = $1,
    updated_at = $2
WHERE id = $3
`

type UpdateRaybotStatusParams struct {
	Status    string
	UpdatedAt pgtype.Timestamptz
	ID        uuid.UUID
}

func (q *Queries) UpdateRaybotStatus(ctx context.Context, arg UpdateRaybotStatusParams) error {
	_, err := q.db.Exec(ctx, updateRaybotStatus, arg.Status, arg.UpdatedAt, arg.ID)
	return err
}
