// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflow_execution.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkflowExecution = `-- name: CreateWorkflowExecution :exec
INSERT INTO workflow_executions (
	id,
    workflow_id,
    status,
    env,
    definition,
    created_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateWorkflowExecutionParams struct {
	ID         uuid.UUID
	WorkflowID uuid.UUID
	Status     string
	Env        map[string]string
	Definition []byte
	CreatedAt  pgtype.Timestamptz
}

func (q *Queries) CreateWorkflowExecution(ctx context.Context, arg CreateWorkflowExecutionParams) error {
	_, err := q.db.Exec(ctx, createWorkflowExecution,
		arg.ID,
		arg.WorkflowID,
		arg.Status,
		arg.Env,
		arg.Definition,
		arg.CreatedAt,
	)
	return err
}

const deleteWorkflowExecution = `-- name: DeleteWorkflowExecution :exec
DELETE FROM workflow_executions WHERE id = $1
`

func (q *Queries) DeleteWorkflowExecution(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorkflowExecution, id)
	return err
}

const getWorkflowExecution = `-- name: GetWorkflowExecution :one
SELECT id, workflow_id, status, env, definition, created_at, started_at, completed_at FROM workflow_executions WHERE id = $1
`

func (q *Queries) GetWorkflowExecution(ctx context.Context, id uuid.UUID) (*WorkflowExecution, error) {
	row := q.db.QueryRow(ctx, getWorkflowExecution, id)
	var i WorkflowExecution
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Status,
		&i.Env,
		&i.Definition,
		&i.CreatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return &i, err
}

const getWorkflowExecutionStatus = `-- name: GetWorkflowExecutionStatus :one
SELECT status FROM workflow_executions WHERE id = $1
`

func (q *Queries) GetWorkflowExecutionStatus(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getWorkflowExecutionStatus, id)
	var status string
	err := row.Scan(&status)
	return status, err
}

const updateWorkflowExecution = `-- name: UpdateWorkflowExecution :one
UPDATE workflow_executions
SET	status = $2,
	started_at = $3,
	completed_at = $4
WHERE id = $1
RETURNING id, workflow_id, status, env, definition, created_at, started_at, completed_at
`

type UpdateWorkflowExecutionParams struct {
	ID          uuid.UUID
	Status      string
	StartedAt   pgtype.Timestamptz
	CompletedAt pgtype.Timestamptz
}

func (q *Queries) UpdateWorkflowExecution(ctx context.Context, arg UpdateWorkflowExecutionParams) (*WorkflowExecution, error) {
	row := q.db.QueryRow(ctx, updateWorkflowExecution,
		arg.ID,
		arg.Status,
		arg.StartedAt,
		arg.CompletedAt,
	)
	var i WorkflowExecution
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Status,
		&i.Env,
		&i.Definition,
		&i.CreatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return &i, err
}
