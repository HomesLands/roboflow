// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflow.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkflow = `-- name: CreateWorkflow :exec
INSERT INTO workflows (
    id,
    name,
    description,
    definition,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateWorkflowParams struct {
	ID          uuid.UUID
	Name        string
	Description *string
	Definition  []byte
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) error {
	_, err := q.db.Exec(ctx, createWorkflow,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Definition,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteWorkflow = `-- name: DeleteWorkflow :exec
DELETE FROM workflows
WHERE id = $1
`

func (q *Queries) DeleteWorkflow(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorkflow, id)
	return err
}

const getWorkflow = `-- name: GetWorkflow :one
SELECT id, name, description, definition, created_at, updated_at FROM workflows
WHERE id = $1
`

func (q *Queries) GetWorkflow(ctx context.Context, id uuid.UUID) (*Workflow, error) {
	row := q.db.QueryRow(ctx, getWorkflow, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Definition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateWorkflow = `-- name: UpdateWorkflow :one
UPDATE workflows
SET
    name = $1,
    description = $2,
    definition = $3,
    updated_at = $4
WHERE id = $5
RETURNING id, name, description, definition, created_at, updated_at
`

type UpdateWorkflowParams struct {
	Name        string
	Description *string
	Definition  []byte
	UpdatedAt   pgtype.Timestamptz
	ID          uuid.UUID
}

func (q *Queries) UpdateWorkflow(ctx context.Context, arg UpdateWorkflowParams) (*Workflow, error) {
	row := q.db.QueryRow(ctx, updateWorkflow,
		arg.Name,
		arg.Description,
		arg.Definition,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Definition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
