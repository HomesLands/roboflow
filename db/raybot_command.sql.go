// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: raybot_command.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRaybotCommand = `-- name: CreateRaybotCommand :exec
INSERT INTO raybot_commands (
    id,
    raybot_id,
    type,
    status,
    input,
    created_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateRaybotCommandParams struct {
	ID        uuid.UUID
	RaybotID  uuid.UUID
	Type      string
	Status    string
	Input     []byte
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateRaybotCommand(ctx context.Context, arg CreateRaybotCommandParams) error {
	_, err := q.db.Exec(ctx, createRaybotCommand,
		arg.ID,
		arg.RaybotID,
		arg.Type,
		arg.Status,
		arg.Input,
		arg.CreatedAt,
	)
	return err
}

const deleteRaybotCommand = `-- name: DeleteRaybotCommand :exec
DELETE FROM raybot_commands
WHERE id = $1
`

func (q *Queries) DeleteRaybotCommand(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRaybotCommand, id)
	return err
}

const getRaybotCommand = `-- name: GetRaybotCommand :one
SELECT id, raybot_id, type, status, input, output, created_at, completed_at FROM raybot_commands
WHERE id = $1
`

func (q *Queries) GetRaybotCommand(ctx context.Context, id uuid.UUID) (*RaybotCommand, error) {
	row := q.db.QueryRow(ctx, getRaybotCommand, id)
	var i RaybotCommand
	err := row.Scan(
		&i.ID,
		&i.RaybotID,
		&i.Type,
		&i.Status,
		&i.Input,
		&i.Output,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return &i, err
}

const getRaybotCommandForUpdate = `-- name: GetRaybotCommandForUpdate :one
SELECT id, raybot_id, type, status, input, output, created_at, completed_at FROM raybot_commands
WHERE id = $1 FOR UPDATE
`

func (q *Queries) GetRaybotCommandForUpdate(ctx context.Context, id uuid.UUID) (*RaybotCommand, error) {
	row := q.db.QueryRow(ctx, getRaybotCommandForUpdate, id)
	var i RaybotCommand
	err := row.Scan(
		&i.ID,
		&i.RaybotID,
		&i.Type,
		&i.Status,
		&i.Input,
		&i.Output,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return &i, err
}

const getRaybotCommandStatus = `-- name: GetRaybotCommandStatus :one
SELECT status FROM raybot_commands
WHERE id = $1
`

func (q *Queries) GetRaybotCommandStatus(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getRaybotCommandStatus, id)
	var status string
	err := row.Scan(&status)
	return status, err
}

const updateRaybotCommand = `-- name: UpdateRaybotCommand :exec
UPDATE raybot_commands
SET
	id = $1,
	raybot_id = $2,
	type = $3,
	status = $4,
	input = $5,
	output = $6,
	created_at = $7,
	completed_at = $8
WHERE id = $1
`

type UpdateRaybotCommandParams struct {
	ID          uuid.UUID
	RaybotID    uuid.UUID
	Type        string
	Status      string
	Input       []byte
	Output      []byte
	CreatedAt   pgtype.Timestamptz
	CompletedAt pgtype.Timestamptz
}

func (q *Queries) UpdateRaybotCommand(ctx context.Context, arg UpdateRaybotCommandParams) error {
	_, err := q.db.Exec(ctx, updateRaybotCommand,
		arg.ID,
		arg.RaybotID,
		arg.Type,
		arg.Status,
		arg.Input,
		arg.Output,
		arg.CreatedAt,
		arg.CompletedAt,
	)
	return err
}
